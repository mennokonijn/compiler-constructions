extern void printInt(int val);
extern void printFloat(float val);

extern int scanInt();
extern float scanFloat();

extern void printSpaces(int num);
extern void printNewlines(int num);


export void printIntVec( int[n] vec ) {
    for (int i = 0, n) {
        printInt(vec[i]);
        printSpaces(1);
    }
    printNewlines(1);
}

export void printFloatVec( float[n] vec ) {
    for (int i = 0, n) {
        printFloat(vec[i]);
        printSpaces(1);
    }
    printNewlines(1);
}


export void printIntMat( int[m, n] mat ){
    for (int i = 0, m) {
        for (int j = 0, n) {
            printInt(mat[i, j]);
            printSpaces(1);
        }
        printNewlines(1);
    }
}

export void printFloatMat( float[m, n] mat ){
    for (int i = 0, m) {
        for (int j = 0, n) {
            printFloat(mat[i, j]);
            printSpaces(1);
        }
        printNewlines(1);
    }
}


export void scanIntVec( int[n] vec ) {
    for (int i = 0, n) {
        vec[i] = scanInt();
    }
    printNewlines(1);
    printIntVec(vec);
}

export void scanFloatVec( float[n ] vec ){
    for (int i = 0, n) {
        vec[i] = scanFloat();
    }
    printFloatVec(vec);
    printNewlines(1);
}

export void scanIntMat( int[m, n] mat ){
    for (int i = 0, m) {
        for (int j = 0, n) {
            mat[i, j] = scanInt();
        }
    }
    printIntMat(mat);
    printNewlines(1);
}

export void scanFloatMat( float[m, n] mat ){
    for (int i = 0, m) {
        for (int j = 0, n) {
            mat[i, j] = scanFloat();
        }
    }
    printFloatMat(mat);
    printNewlines(1);
}

export void matMul( float[m, n] a, float[o, p] b, float[q, l] c ) {
    for (int i = 0, m) {
        for (int j = 0, n) {
              for (int k = 0, n) {
                 c[i, j] = a[i, k] * b[k, j];
            }
        }
    }
    printFloatMat(c);
}
